{"ast":null,"code":"import { Spin, Image, Dropdown, Menu, message, Typography, Modal, Input, List, Breadcrumb, Button } from 'antd';\nimport React__default, { useRef, useState, useLayoutEffect, createElement, Fragment } from 'react';\nimport { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query';\nimport 'antd/dist/antd.css';\nimport { FolderFilled, FileFilled, MoreOutlined, CopyOutlined, EditOutlined, DeleteOutlined, PlusSquareOutlined, UploadOutlined } from '@ant-design/icons';\n\nfunction GetFileNameFromLink(link) {\n  const fileName = link.split('/').pop();\n  return fileName;\n}\n\nfunction IsImage(url) {\n  return /\\.(jpg|jpeg|png|webp|avif|gif|svg)$/.test(url);\n}\n\nconst Actions = {\n  actions: {},\n\n  set(actions) {\n    this.actions = actions;\n  },\n\n  get() {\n    return this.actions;\n  }\n\n};\n\nfunction CopyToClipboard(value) {\n  const textArea = document.createElement('textarea');\n  textArea.value = value;\n  document.body.appendChild(textArea);\n  textArea.select();\n  document.execCommand('copy');\n  textArea.remove();\n}\n\nfunction BeautifyData(responseData) {\n  const {\n    status,\n    data\n  } = responseData;\n  let lists = [];\n\n  if (status) {\n    lists = data.map(list => {\n      return { ...list,\n        title: GetFileNameFromLink(list.link),\n        type: IsImage(list.link) ? 'image' : list.type\n      };\n    });\n  } else {\n    console.error(responseData);\n    throw Error('Failed to retrieve data');\n  }\n\n  return lists;\n}\n\nfunction GetFileExtension(link) {\n  var doc = link.substring(link.lastIndexOf('/'));\n  return doc.substring(doc.lastIndexOf('.'));\n}\n\nconst ContainerStyle = {\n  height: '200px',\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nfunction Loading() {\n  return React__default.createElement(\"div\", {\n    style: ContainerStyle\n  }, React__default.createElement(Spin, {\n    size: 'large'\n  }));\n}\n\nconst styles = {\n  fontSize: 50,\n  color: '#3399ff'\n};\n\nfunction Folder() {\n  return React__default.createElement(FolderFilled, {\n    style: styles,\n    className: 'fm-item-icon'\n  });\n}\n\nconst styles$1 = {\n  fontSize: 35,\n  color: '#fa7125'\n};\n\nfunction File() {\n  return React__default.createElement(FileFilled, {\n    style: styles$1,\n    className: 'fm-item-icon'\n  });\n}\n\nconst imageStyle = {\n  borderRadius: '4px'\n};\n\nfunction ImageFile(_ref) {\n  let {\n    src\n  } = _ref;\n  return React__default.createElement(\"div\", null, React__default.createElement(Image, {\n    style: imageStyle,\n    width: 65,\n    height: 50,\n    src: src,\n    alt: ''\n  }));\n}\n\nvar styles$2 = {\n  \"fmItem\": \"_styles-module__fmItem__3AgOk\",\n  \"fmItemContainer\": \"_styles-module__fmItemContainer__3uMId\",\n  \"fmItemMenuIcon\": \"_styles-module__fmItemMenuIcon__33CL5\",\n  \"fmItemName\": \"_styles-module__fmItemName__39AR9\",\n  \"loader\": \"_styles-module__loader__3qqrl\"\n};\n\nconst MenuOption = _ref2 => {\n  let {\n    type,\n    link,\n    showRenameModal\n  } = _ref2;\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(Dropdown, {\n    overlay: () => React__default.createElement(MenuItems, Object.assign({}, {\n      type,\n      link,\n      showRenameModal\n    })),\n    trigger: ['click'],\n    placement: 'bottomRight'\n  }, React__default.createElement(\"div\", {\n    className: styles$2.fmItemMenuIcon\n  }, React__default.createElement(MoreOutlined, null))));\n};\n\nconst MenuItems = _ref3 => {\n  let {\n    type,\n    link,\n    showRenameModal\n  } = _ref3;\n  const {\n    deletePath\n  } = Actions.get();\n  const lists = [{\n    icon: React__default.createElement(CopyOutlined, null),\n    label: 'Copy',\n    key: 0\n  }, {\n    icon: React__default.createElement(EditOutlined, null),\n    label: 'Rename',\n    key: 1\n  }, {\n    icon: React__default.createElement(DeleteOutlined, null),\n    label: 'Delete',\n    key: 2\n  }];\n\n  if (type === 'folder') {\n    delete lists[0];\n  }\n\n  const onClick = async _ref4 => {\n    let {\n      key\n    } = _ref4;\n\n    if (Number(key) === 0) {\n      CopyToClipboard(link);\n      message.info('Copied to clipboard');\n    }\n\n    if (Number(key) === 2) {\n      const confirmation = confirm('Are you sure you want to remove ?');\n\n      if (confirmation) {\n        await deletePath(link);\n      }\n    }\n\n    if (Number(key) === 1) {\n      showRenameModal();\n    }\n  };\n\n  return React__default.createElement(Menu, {\n    items: lists,\n    onClick: onClick\n  });\n};\n\nconst FileFolderTitle = _ref5 => {\n  let {\n    title\n  } = _ref5;\n  return React__default.createElement(Typography.Paragraph, {\n    title: title,\n    ellipsis: {\n      rows: 1\n    },\n    style: {\n      margin: 0,\n      height: 30,\n      padding: '4px 6px',\n      fontSize: 12,\n      lineHeight: '22px',\n      fontWeight: 500,\n      textAlign: 'center'\n    }\n  }, title);\n};\n\nconst RenameModal = _ref6 => {\n  let {\n    details,\n    setRenameDetails\n  } = _ref6;\n  const inputRef = useRef(null);\n  const {\n    renamePath\n  } = Actions.get();\n  const {\n    _show,\n    data\n  } = details;\n  const {\n    type,\n    title,\n    link\n  } = data;\n  const ext = type === 'image' || type === 'file' ? GetFileExtension(title) : '';\n  const fileName = data === null || data === void 0 ? void 0 : data.title.replace(ext, '');\n  const [confirmLoading, setConfirmLoading] = useState(false);\n\n  const handleOk = async () => {\n    const confirmation = confirm('Are you sure you want to rename ?');\n    if (!confirmation) return;\n    setConfirmLoading(true);\n    await renamePath(link, `${inputRef.current}${ext}`);\n    setRenameDetails({\n      _show: false,\n      data: {}\n    });\n    setConfirmLoading(false);\n  };\n\n  const handleCancel = () => {\n    setRenameDetails({\n      _show: false,\n      data: {}\n    });\n  };\n\n  return React__default.createElement(Modal, {\n    title: 'Rename',\n    visible: _show,\n    onOk: handleOk,\n    confirmLoading: confirmLoading,\n    onCancel: handleCancel\n  }, React__default.createElement(Input, {\n    addonAfter: ext,\n    defaultValue: fileName,\n    autoFocus: true,\n    onChange: e => inputRef.current = e.currentTarget.value\n  }));\n};\n\nfunction Lists(_ref7) {\n  let {\n    data,\n    updateBreadBumbIndex\n  } = _ref7;\n  const [renameDetails, setRenameDetails] = useState({\n    _show: false,\n    data: {}\n  });\n\n  function showRenameModal(data) {\n    setRenameDetails({\n      _show: true,\n      data\n    });\n  }\n\n  return React__default.createElement(React__default.Fragment, null, React__default.createElement(List, {\n    grid: {\n      gutter: 16,\n      xs: 3,\n      sm: 4,\n      md: 5,\n      lg: 6,\n      xl: 8,\n      xxl: 9\n    },\n    dataSource: data,\n    renderItem: _ref8 => {\n      let {\n        type,\n        title,\n        link\n      } = _ref8;\n      return React__default.createElement(List.Item, null, React__default.createElement(\"div\", {\n        className: styles$2.fmItem\n      }, React__default.createElement(\"div\", {\n        className: styles$2.fmItemContainer\n      }, type === 'folder' ? React__default.createElement(\"span\", {\n        onClick: () => updateBreadBumbIndex(title, link),\n        style: {\n          cursor: 'pointer'\n        }\n      }, React__default.createElement(Folder, null)) : type === 'file' ? React__default.createElement(File, null) : React__default.createElement(\"div\", null, React__default.createElement(ImageFile, {\n        src: link\n      }))), React__default.createElement(MenuOption, Object.assign({}, {\n        type,\n        link\n      }, {\n        showRenameModal: () => showRenameModal({\n          type,\n          title,\n          link\n        })\n      })), React__default.createElement(FileFolderTitle, Object.assign({}, {\n        title\n      }))));\n    }\n  }), renameDetails !== null && renameDetails !== void 0 && renameDetails._show ? React__default.createElement(RenameModal, {\n    details: renameDetails,\n    key: `${renameDetails === null || renameDetails === void 0 ? void 0 : renameDetails._show}-rename-modal`,\n    setRenameDetails: setRenameDetails\n  }) : React__default.createElement(React__default.Fragment, null));\n}\n\nconst ModalTitle = _ref9 => {\n  let {\n    toggleBreadCumbIndex,\n    breadCumbLists\n  } = _ref9;\n  const selectInputRef = useRef(null);\n  const {\n    create\n  } = Actions.get();\n\n  const handleChangeFile = async event => {\n    const link = breadCumbLists[breadCumbLists.length - 1].link;\n    const file = event.target.files[0];\n    const fileExtension = file === null || file === void 0 ? void 0 : file.type.split('/')[1];\n    const payload = {\n      name: file === null || file === void 0 ? void 0 : file.name.replace('.' + fileExtension, ''),\n      type: 'FILE',\n      location: link,\n      file: file\n    };\n    const response = await create(payload);\n\n    if (response !== null && response !== void 0 && response.status) {\n      alert('File Successfully uploaded');\n    } else {\n      alert('File upload failed');\n    }\n  };\n\n  const createNewFolder = async () => {\n    const link = breadCumbLists[breadCumbLists.length - 1].link;\n    const name = prompt('Enter Folder Name');\n\n    if (name && name !== '') {\n      const payload = {\n        name,\n        type: 'FOLDER',\n        location: link,\n        file: ''\n      };\n      const response = await create(payload);\n\n      if (response !== null && response !== void 0 && response.status) {\n        alert('Folder Successfully created');\n      } else {\n        alert('Folder create failed');\n      }\n    }\n  };\n\n  return React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, React__default.createElement(Breadcrumb, null, breadCumbLists.map((_ref10, index) => {\n    let {\n      title,\n      link\n    } = _ref10;\n    return React__default.createElement(Breadcrumb.Item, {\n      key: `${title}-${index}-${link}`\n    }, React__default.createElement(\"span\", {\n      onClick: () => toggleBreadCumbIndex(index),\n      style: {\n        cursor: 'pointer'\n      }\n    }, title));\n  })), React__default.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, React__default.createElement(Button, {\n    icon: React__default.createElement(PlusSquareOutlined, null),\n    onClick: () => createNewFolder()\n  }, \"Create Folder\"), React__default.createElement(\"div\", {\n    style: {\n      marginLeft: '10px'\n    }\n  }), React__default.createElement(Button, {\n    icon: React__default.createElement(UploadOutlined, null),\n    onClick: () => {\n      var _selectInputRef$curre;\n\n      return selectInputRef === null || selectInputRef === void 0 ? void 0 : (_selectInputRef$curre = selectInputRef.current) === null || _selectInputRef$curre === void 0 ? void 0 : _selectInputRef$curre.click();\n    }\n  }, \"Upload File\")), React__default.createElement(\"input\", {\n    ref: selectInputRef,\n    type: 'file',\n    onChange: handleChangeFile,\n    style: {\n      display: 'none'\n    }\n  }));\n};\n\nconst queryClient = new QueryClient();\n\nconst ReactFileManager = _ref11 => {\n  let {\n    visible,\n    onClose,\n    getList,\n    renamePath,\n    deletePath,\n    create\n  } = _ref11;\n  useLayoutEffect(() => {\n    Actions.set({\n      getList,\n      deletePath,\n      renamePath,\n      onClose,\n      create\n    });\n  }, []);\n  return createElement(QueryClientProvider, {\n    client: queryClient\n  }, createElement(Body, Object.assign({}, {\n    visible\n  }, {\n    key: `${visible}-file-manager-body`\n  })), \" :\", ' ', createElement(Fragment, null));\n};\n\nconst Body = _ref12 => {\n  let {\n    visible\n  } = _ref12;\n  const {\n    getList,\n    onClose\n  } = Actions.get();\n  const [isVisible, setVisible] = useState(visible);\n  const [breadCumbLists, setBreadCumbLists] = useState([{\n    title: 'Home',\n    link: '/'\n  }]);\n  const [queryKey, setQueryKey] = useState('/');\n  const {\n    isLoading,\n    data\n  } = useQuery([queryKey], () => {\n    return visible ? getList(queryKey) : new Promise(resolve => resolve(null));\n  });\n\n  const handleModalCancel = () => {\n    setVisible(false);\n    onClose();\n  };\n\n  const updateBreadBumbIndex = (title, link) => {\n    const newBread = [...breadCumbLists, {\n      title,\n      link\n    }];\n    let path = '';\n    newBread.forEach((item, index) => {\n      if (index > 0) {\n        path += (index > 1 ? '/' : '') + item.title;\n      }\n    });\n    setBreadCumbLists(newBread);\n    setQueryKey('/' + encodeURIComponent(path));\n  };\n\n  const toggleBreadCumbIndex = index => {\n    const filteredBreadCumb = breadCumbLists.filter((_, i) => i <= index);\n    let path = '';\n    filteredBreadCumb.forEach((item, index) => {\n      if (index > 0) {\n        path += (index > 1 ? '/' : '') + item.title;\n      }\n    });\n    setBreadCumbLists(filteredBreadCumb);\n    setQueryKey('/' + encodeURIComponent(path));\n  };\n\n  const lists = data ? BeautifyData(data) : [];\n  return createElement(Modal, {\n    visible: isVisible,\n    width: '90%',\n    onCancel: handleModalCancel,\n    closable: false,\n    title: createElement(ModalTitle, Object.assign({}, {\n      breadCumbLists,\n      toggleBreadCumbIndex\n    })),\n    footer: [createElement(Button, {\n      key: 'back',\n      onClick: handleModalCancel\n    }, \"CLOSE\")]\n  }, isLoading ? createElement(Loading, null) : createElement(Lists, Object.assign({\n    data: lists\n  }, {\n    updateBreadBumbIndex\n  })));\n};\n\nexport { ReactFileManager };","map":{"version":3,"sources":["../src/utilities/helper.ts","../src/components/loading.tsx","../src/components/folder.tsx","../src/components/file.tsx","../src/components/image.tsx","../src/components/menu.tsx","../src/components/title.tsx","../src/components/renamemodal.tsx","../src/elements/lists.tsx","../src/elements/modaltitle.tsx","../src/index.tsx"],"names":["GetFileNameFromLink","link","fileName","IsImage","url","Actions","actions","set","get","CopyToClipboard","value","textArea","document","BeautifyData","responseData","data","lists","list","title","type","console","Error","GetFileExtension","doc","ContainerStyle","height","width","display","justifyContent","alignItems","Loading","style","size","styles","fontSize","color","Folder","className","File","imageStyle","borderRadius","ImageFile","src","alt","MenuOption","showRenameModal","React","overlay","trigger","placement","fmItemMenuIcon","MenuItems","deletePath","icon","label","key","onClick","Number","message","confirmation","confirm","items","FileFolderTitle","Typography","ellipsis","rows","margin","padding","lineHeight","fontWeight","textAlign","RenameModal","setRenameDetails","inputRef","useRef","renamePath","ext","useState","handleOk","setConfirmLoading","current","_show","handleCancel","visible","onOk","confirmLoading","onCancel","addonAfter","defaultValue","autoFocus","onChange","e","Lists","updateBreadBumbIndex","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","List","fmItem","fmItemContainer","cursor","details","renameDetails","ModalTitle","breadCumbLists","selectInputRef","create","handleChangeFile","file","event","fileExtension","payload","name","location","response","alert","createNewFolder","prompt","flexDirection","Breadcrumb","index","toggleBreadCumbIndex","marginLeft","ref","queryClient","ReactFileManager","client","Body","onClose","useQuery","getList","resolve","handleModalCancel","setVisible","newBread","path","item","setBreadCumbLists","setQueryKey","encodeURIComponent","filteredBreadCumb","i","isVisible","closable","footer","isLoading"],"mappings":"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","sourcesContent":["export function GetFileNameFromLink(link: string) {\n  const fileName = link.split('/').pop()\n  return fileName\n}\nexport function IsImage(url: string) {\n  return /\\.(jpg|jpeg|png|webp|avif|gif|svg)$/.test(url)\n}\nexport const Actions = {\n  actions: {},\n  set(actions: any) {\n    this.actions = actions\n  },\n  get() {\n    return this.actions\n  }\n}\nexport function CopyToClipboard(value: any) {\n  const textArea = document.createElement('textarea')\n  textArea.value = value\n  document.body.appendChild(textArea)\n  textArea.select()\n  document.execCommand('copy')\n  textArea.remove()\n}\nexport function BeautifyData(responseData: any) {\n  const { status, data } = responseData\n  let lists = []\n  if (status) {\n    lists = data.map((list: any) => {\n      return {\n        ...list,\n        title: GetFileNameFromLink(list.link),\n        type: IsImage(list.link) ? 'image' : list.type\n      }\n    })\n  } else {\n    console.error(responseData)\n    throw Error('Failed to retrieve data')\n  }\n  return lists\n}\nexport function GetFileExtension(link: string) {\n  var doc = link.substring(link.lastIndexOf('/'))\n  return doc.substring(doc.lastIndexOf('.'))\n}\n","import { Spin } from 'antd'\nimport React from 'react'\n\nconst ContainerStyle = {\n  height: '200px',\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n}\nexport default function Loading() {\n  return (\n    <div style={ContainerStyle}>\n      <Spin size='large' />\n    </div>\n  )\n}\n","import React from 'react'\nimport { FolderFilled } from '@ant-design/icons'\n\nconst styles = {\n  fontSize: 50,\n  color: '#3399ff'\n}\nexport default function Folder() {\n  return <FolderFilled style={styles} className='fm-item-icon' />\n}\n","import React from 'react'\nimport { FileFilled } from '@ant-design/icons'\n\nconst styles = {\n  fontSize: 35,\n  color: '#fa7125'\n}\nexport default function File() {\n  return <FileFilled style={styles} className='fm-item-icon' />\n}\n","import { Image } from 'antd'\nimport React from 'react'\n\nconst imageStyle = {\n  borderRadius: '4px'\n}\nexport default function ImageFile({ src }: { src: string }) {\n  return (\n    <div>\n      <Image style={imageStyle} width={65} height={50} src={src} alt='' />\n    </div>\n  )\n}\n","import {\n  CopyOutlined,\n  EditOutlined,\n  MoreOutlined,\n  DeleteOutlined\n} from '@ant-design/icons'\nimport { Dropdown, Menu, message } from 'antd'\nimport React from 'react'\nimport styles from '../styles.module.css'\n// import { DeleteFileFolder } from '../utilities/apicalls'\nimport { Actions, CopyToClipboard } from '../utilities/helper'\n\nconst MenuOption = ({\n  type,\n  link,\n  showRenameModal\n}: {\n  type: string\n  link: string\n  showRenameModal: (data: any) => void\n}) => {\n  return (\n    <React.Fragment>\n      <Dropdown\n        overlay={() => <MenuItems {...{ type, link, showRenameModal }} />}\n        trigger={['click']}\n        placement='bottomRight'\n      >\n        <div className={styles.fmItemMenuIcon}>\n          <MoreOutlined />\n        </div>\n      </Dropdown>\n    </React.Fragment>\n  )\n}\nconst MenuItems = ({\n  type,\n  link,\n  showRenameModal\n}: {\n  type: string\n  link: string\n  showRenameModal: any\n}) => {\n  const { deletePath }: any = Actions.get()\n  const lists = [\n    {\n      icon: <CopyOutlined />,\n      label: 'Copy',\n      key: 0\n    },\n    {\n      icon: <EditOutlined />,\n      label: 'Rename',\n      key: 1\n    },\n    {\n      icon: <DeleteOutlined />,\n      label: 'Delete',\n      key: 2\n    }\n  ]\n  if (type === 'folder') {\n    delete lists[0]\n  }\n  const onClick = async ({ key }: any) => {\n    if (Number(key) === 0) {\n      CopyToClipboard(link)\n      message.info('Copied to clipboard')\n    }\n    if (Number(key) === 2) {\n      const confirmation = confirm('Are you sure you want to remove ?')\n      if (confirmation) {\n        await deletePath(link)\n      }\n    }\n    if (Number(key) === 1) {\n      showRenameModal()\n    }\n  }\n  return <Menu items={lists} onClick={onClick} />\n}\n\nexport default MenuOption\n","import React from 'react'\nimport { Typography } from 'antd'\nconst FileFolderTitle = ({ title }: { title: string }) => {\n  return (\n    <Typography.Paragraph\n      title={title}\n      ellipsis={{ rows: 1 }}\n      style={{\n        margin: 0,\n        height: 30,\n        padding: '4px 6px',\n        fontSize: 12,\n        lineHeight: '22px',\n        fontWeight: 500,\n        textAlign: 'center'\n      }}\n    >\n      {title}\n    </Typography.Paragraph>\n  )\n}\n\nexport default FileFolderTitle\n","import { Input, Modal } from 'antd'\nimport React, { useRef, useState } from 'react'\nimport { Actions, GetFileExtension } from '../utilities/helper'\n\nconst RenameModal = ({\n  details,\n  setRenameDetails\n}: {\n  details: any\n  setRenameDetails: any\n}) => {\n  const inputRef: any = useRef(null)\n  const { renamePath }: any = Actions.get()\n  const { _show, data } = details\n  const { type, title, link } = data\n  const ext = type === 'image' || type === 'file' ? GetFileExtension(title) : ''\n  const fileName = data?.title.replace(ext, '')\n  const [confirmLoading, setConfirmLoading] = useState(false)\n  const handleOk = async () => {\n    const confirmation = confirm('Are you sure you want to rename ?')\n    if (!confirmation) return\n    setConfirmLoading(true)\n    await renamePath(link, `${inputRef.current}${ext}`)\n    setRenameDetails({ _show: false, data: {} })\n    setConfirmLoading(false)\n  }\n\n  const handleCancel = () => {\n    setRenameDetails({ _show: false, data: {} })\n  }\n\n  return (\n    <Modal\n      title='Rename'\n      visible={_show}\n      onOk={handleOk}\n      confirmLoading={confirmLoading}\n      onCancel={handleCancel}\n    >\n      <Input\n        addonAfter={ext}\n        defaultValue={fileName}\n        autoFocus\n        onChange={(e) => (inputRef.current = e.currentTarget.value)}\n      />\n    </Modal>\n  )\n}\n\nexport default RenameModal\n","import React, { useState } from 'react'\nimport { List } from 'antd'\nimport {\n  File,\n  FileFolderTitle,\n  Folder,\n  ImageFile,\n  MenuOption,\n  RenameModal\n} from '../components'\n// eslint-disable-next-line no-unused-vars\nimport { listType } from '../types'\nimport styles from '../styles.module.css'\n\ninterface ListProps {\n  data: listType[]\n  updateBreadBumbIndex: (title: string, link: string) => void\n}\nexport default function Lists({ data, updateBreadBumbIndex }: ListProps) {\n  const [renameDetails, setRenameDetails] = useState<{\n    _show: boolean\n    data: {\n      title?: string\n      link?: string\n      type?: string\n    }\n  }>({\n    _show: false,\n    data: {}\n  })\n  function showRenameModal(data: any) {\n    setRenameDetails({ _show: true, data })\n  }\n  return (\n    <React.Fragment>\n      <List\n        grid={{\n          gutter: 16,\n          xs: 3,\n          sm: 4,\n          md: 5,\n          lg: 6,\n          xl: 8,\n          xxl: 9\n        }}\n        dataSource={data}\n        renderItem={({ type, title, link }: any) => (\n          <List.Item>\n            <div className={styles.fmItem}>\n              <div className={styles.fmItemContainer}>\n                {type === 'folder' ? (\n                  <span\n                    onClick={() => updateBreadBumbIndex(title, link)}\n                    style={{ cursor: 'pointer' }}\n                  >\n                    <Folder />\n                  </span>\n                ) : type === 'file' ? (\n                  <File />\n                ) : (\n                  <div>\n                    <ImageFile src={link} />\n                  </div>\n                )}\n              </div>\n              <MenuOption\n                {...{ type, link }}\n                showRenameModal={() => showRenameModal({ type, title, link })}\n              />\n              <FileFolderTitle {...{ title }} />\n            </div>\n          </List.Item>\n        )}\n      />\n      {renameDetails?._show ? (\n        <RenameModal\n          details={renameDetails}\n          key={`${renameDetails?._show}-rename-modal`}\n          setRenameDetails={setRenameDetails}\n        />\n      ) : (\n        <React.Fragment />\n      )}\n    </React.Fragment>\n  )\n}\n","import { Breadcrumb, Button } from 'antd'\nimport React, { useRef } from 'react'\nimport { PlusSquareOutlined, UploadOutlined } from '@ant-design/icons'\n// eslint-disable-next-line no-unused-vars\nimport { BreadCumbType, CreateType } from '../types'\nimport { Actions } from '../utilities/helper'\n\ninterface ModalTitleProps {\n  breadCumbLists: BreadCumbType[]\n  toggleBreadCumbIndex: (index: number) => void\n}\nconst ModalTitle = ({\n  toggleBreadCumbIndex,\n  breadCumbLists\n}: ModalTitleProps) => {\n  const selectInputRef: any = useRef(null)\n  const { create }: any = Actions.get()\n\n  const handleChangeFile = async (event: any) => {\n    const link = breadCumbLists[breadCumbLists.length - 1].link\n    const file = event.target.files[0]\n    const fileExtension = file?.type.split('/')[1]\n    const payload: CreateType = {\n      name: file?.name.replace('.' + fileExtension, ''),\n      type: 'FILE',\n      location: link,\n      file: file\n    }\n    const response = await create(payload)\n    if (response?.status) {\n      alert('File Successfully uploaded')\n    } else {\n      alert('File upload failed')\n    }\n  }\n  const createNewFolder = async () => {\n    const link = breadCumbLists[breadCumbLists.length - 1].link\n    const name: any = prompt('Enter Folder Name')\n    if (name && name !== '') {\n      const payload: CreateType = {\n        name,\n        type: 'FOLDER',\n        location: link,\n        file: ''\n      }\n      const response = await create(payload)\n      if (response?.status) {\n        alert('Folder Successfully created')\n      } else {\n        alert('Folder create failed')\n      }\n    }\n  }\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      }}\n    >\n      <Breadcrumb>\n        {breadCumbLists.map(({ title, link }: BreadCumbType, index: number) => {\n          return (\n            <Breadcrumb.Item key={`${title}-${index}-${link}`}>\n              <span\n                onClick={() => toggleBreadCumbIndex(index)}\n                style={{ cursor: 'pointer' }}\n              >\n                {title}\n              </span>\n            </Breadcrumb.Item>\n          )\n        })}\n      </Breadcrumb>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between'\n        }}\n      >\n        <Button icon={<PlusSquareOutlined />} onClick={() => createNewFolder()}>\n          Create Folder\n        </Button>\n        <div style={{ marginLeft: '10px' }} />\n        <Button\n          icon={<UploadOutlined />}\n          onClick={() => selectInputRef?.current?.click()}\n        >\n          Upload File\n        </Button>\n      </div>\n      <input\n        ref={selectInputRef}\n        type='file'\n        onChange={handleChangeFile}\n        style={{ display: 'none' }}\n      />\n    </div>\n  )\n}\n\nexport default ModalTitle\n","import { Button, Modal } from 'antd'\nimport * as React from 'react'\nimport {\n  useQuery,\n  QueryClient,\n  QueryClientProvider\n} from '@tanstack/react-query'\nimport 'antd/dist/antd.css'\nimport { Actions, BeautifyData } from './utilities/helper'\nimport { Loading } from './components'\nimport { Lists, ModalTitle } from './elements'\n// eslint-disable-next-line no-unused-vars\nimport { BreadCumbType, CreateType, listType } from './types'\n\ninterface ReactFileManagerProps {\n  visible: boolean\n  getList: (path: string) => Promise<any>\n  deletePath: (path: string) => Promise<any>\n  renamePath: (path: string, newFileName: string) => Promise<any>\n  create: (payload: CreateType) => Promise<any>\n  onClose: () => void\n}\nconst queryClient = new QueryClient()\nexport const ReactFileManager = ({\n  visible,\n  onClose,\n  getList,\n  renamePath,\n  deletePath,\n  create\n}: ReactFileManagerProps) => {\n  React.useLayoutEffect(() => {\n    Actions.set({ getList, deletePath, renamePath, onClose, create })\n  }, [])\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Body {...{ visible }} key={`${visible}-file-manager-body`} /> :{' '}\n      <React.Fragment />\n    </QueryClientProvider>\n  )\n}\n\nconst Body = ({ visible }: { visible: boolean }) => {\n  const { getList, onClose }: any = Actions.get()\n  const [isVisible, setVisible] = React.useState<boolean>(visible)\n  const [breadCumbLists, setBreadCumbLists] = React.useState<\n    Array<BreadCumbType>\n  >([\n    {\n      title: 'Home',\n      link: '/'\n    }\n  ])\n  const [queryKey, setQueryKey] = React.useState<string>('/')\n  const { isLoading, data }: any = useQuery([queryKey], () => {\n    return visible ? getList(queryKey) : new Promise((resolve) => resolve(null))\n  })\n  const handleModalCancel = () => {\n    setVisible(false)\n    onClose()\n  }\n  const updateBreadBumbIndex = (title: string, link: string) => {\n    const newBread: any = [...breadCumbLists, { title, link }]\n    let path: string = ''\n    newBread.forEach((item: any, index: number) => {\n      if (index > 0) {\n        path += (index > 1 ? '/' : '') + item.title\n      }\n    })\n    setBreadCumbLists(newBread)\n    setQueryKey('/' + encodeURIComponent(path))\n  }\n  const toggleBreadCumbIndex = (index: number) => {\n    const filteredBreadCumb = breadCumbLists.filter((_, i) => i <= index)\n    let path: string = ''\n    filteredBreadCumb.forEach((item: any, index: number) => {\n      if (index > 0) {\n        path += (index > 1 ? '/' : '') + item.title\n      }\n    })\n    setBreadCumbLists(filteredBreadCumb)\n    setQueryKey('/' + encodeURIComponent(path))\n  }\n  const lists: listType[] = data ? BeautifyData(data) : []\n\n  return (\n    <Modal\n      visible={isVisible}\n      width='90%'\n      onCancel={handleModalCancel}\n      closable={false}\n      title={<ModalTitle {...{ breadCumbLists, toggleBreadCumbIndex }} />}\n      footer={[\n        <Button key='back' onClick={handleModalCancel}>\n          CLOSE\n        </Button>\n      ]}\n    >\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <Lists data={lists} {...{ updateBreadBumbIndex }} />\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}